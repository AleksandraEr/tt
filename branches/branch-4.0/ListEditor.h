// generated by Fast Light User Interface Designer (fluid) version 1.0100

#ifndef ListEditor_h
#define ListEditor_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "epm.h"
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Tile.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Button.H>
#include <FL/Fl_File_Browser.H>

class ListEditor {
  static ListEditor *first_;
  static char history_[10][1024];
  dist_t *dist_;
  char filename_[1024];
  char icontitle_[1024];
  int margins_[4];
  int modified_;
  ListEditor *next_;
  char title_[1024];
  static void build_cb(ListEditor *le);
  int check_save();
  static void close_cb(ListEditor *le);
  static void copy_cb(ListEditor *le);
  static void cut_cb(ListEditor *le);
  static void delete_cb(ListEditor *le);
  static void file_settings_cb(ListEditor *le);
  static void help_cb(ListEditor *le, const char *html);
  static void list_cb(ListEditor *le);
  static void margins_cb(ListEditor *le);
  void modified(int m);
  static void new_cb(ListEditor *le);
  static void open_cb(ListEditor *le);
  static void open_history_cb(ListEditor *le, const char *listfile);
  static void paste_cb(ListEditor *le);
  static void project_settings_cb(ListEditor *le);
  static void quit_cb(ListEditor *le);
  static void save_cb(ListEditor *le);
  static void save_as_cb(ListEditor *le);
  void set_title();
  void update_history(const char *listfile);
  void update_list();
public:
  ListEditor(const char *listfile);
private:
  Fl_Double_Window *window;
  inline void cb_window_i(Fl_Double_Window*, void*);
  static void cb_window(Fl_Double_Window*, void*);
  Fl_Menu_Bar *menubar;
  static Fl_Menu_Item menu_menubar[];
  inline void cb_New_i(Fl_Menu_*, void*);
  static void cb_New(Fl_Menu_*, void*);
  inline void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  static Fl_Menu_Item *history_items;
  inline void cb_history_items_i(Fl_Menu_*, void*);
  static void cb_history_items(Fl_Menu_*, void*);
  inline void cb_filename_i(Fl_Menu_*, void*);
  static void cb_filename(Fl_Menu_*, void*);
  inline void cb_filename1_i(Fl_Menu_*, void*);
  static void cb_filename1(Fl_Menu_*, void*);
  inline void cb_filename2_i(Fl_Menu_*, void*);
  static void cb_filename2(Fl_Menu_*, void*);
  inline void cb_filename3_i(Fl_Menu_*, void*);
  static void cb_filename3(Fl_Menu_*, void*);
  inline void cb_filename4_i(Fl_Menu_*, void*);
  static void cb_filename4(Fl_Menu_*, void*);
  inline void cb_filename5_i(Fl_Menu_*, void*);
  static void cb_filename5(Fl_Menu_*, void*);
  inline void cb_filename6_i(Fl_Menu_*, void*);
  static void cb_filename6(Fl_Menu_*, void*);
  inline void cb_filename7_i(Fl_Menu_*, void*);
  static void cb_filename7(Fl_Menu_*, void*);
  inline void cb_filename8_i(Fl_Menu_*, void*);
  static void cb_filename8(Fl_Menu_*, void*);
  inline void cb_Close_i(Fl_Menu_*, void*);
  static void cb_Close(Fl_Menu_*, void*);
  inline void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  inline void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  inline void cb_Build_i(Fl_Menu_*, void*);
  static void cb_Build(Fl_Menu_*, void*);
  inline void cb_Quit_i(Fl_Menu_*, void*);
  static void cb_Quit(Fl_Menu_*, void*);
  inline void cb_Copy_i(Fl_Menu_*, void*);
  static void cb_Copy(Fl_Menu_*, void*);
  inline void cb_Cu_i(Fl_Menu_*, void*);
  static void cb_Cu(Fl_Menu_*, void*);
  inline void cb_Delete_i(Fl_Menu_*, void*);
  static void cb_Delete(Fl_Menu_*, void*);
  inline void cb_Paste_i(Fl_Menu_*, void*);
  static void cb_Paste(Fl_Menu_*, void*);
  inline void cb_File_i(Fl_Menu_*, void*);
  static void cb_File(Fl_Menu_*, void*);
  inline void cb_P_i(Fl_Menu_*, void*);
  static void cb_P(Fl_Menu_*, void*);
  inline void cb_Contents_i(Fl_Menu_*, void*);
  static void cb_Contents(Fl_Menu_*, void*);
  inline void cb_Introduction_i(Fl_Menu_*, void*);
  static void cb_Introduction(Fl_Menu_*, void*);
  inline void cb_Basic_i(Fl_Menu_*, void*);
  static void cb_Basic(Fl_Menu_*, void*);
  inline void cb_Advanced_i(Fl_Menu_*, void*);
  static void cb_Advanced(Fl_Menu_*, void*);
  inline void cb_Version_i(Fl_Menu_*, void*);
  static void cb_Version(Fl_Menu_*, void*);
  Fl_Tile *margin_tile;
  inline void cb_margin_tile_i(Fl_Tile*, void*);
  static void cb_margin_tile(Fl_Tile*, void*);
  Fl_Box *margin_buttons[3];
  Fl_Menu_Button *margin_menu;
  static Fl_Menu_Item menu_margin_menu[];
  static Fl_Menu_Item *margin_items;
  inline void cb_margin_items_i(Fl_Menu_*, void*);
  static void cb_margin_items(Fl_Menu_*, void*);
  inline void cb_Source_i(Fl_Menu_*, void*);
  static void cb_Source(Fl_Menu_*, void*);
  inline void cb_Package_i(Fl_Menu_*, void*);
  static void cb_Package(Fl_Menu_*, void*);
  Fl_File_Browser *list;
  inline void cb_list_i(Fl_File_Browser*, void*);
  static void cb_list(Fl_File_Browser*, void*);
public:
  ~ListEditor();
  void hide();
  int modified();
  int open(const char *listfile);
  int save(const char *listfile);
  int save();
  void show();
  int shown();
};
#endif
